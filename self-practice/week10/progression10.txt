/* part 01 what is Client-Side Storages? */
- consists of JavaScript APIs ที่อนุญาตให้เราสามารถ เก็บข้อมูลไว้ในเครื่องของผู้ใช้ แล้วเรียกใช้อีกครั้งได้ภายหลัง
- มี 3 ประเภท
1. HTTP Cookies -> ใช้แพร่หลายในการเก็บข้อมูลเกี่ยวกับการตั้งค่าส่วนตัวของผู้ใช้ หรือ สถานะการเข้าสู่ระบบ 
เช่น session ID, access tokens
2. Web Storages -> API provides ไวยากรณ์ที่ง่ายต่อการเก็บและเรียกข้อมูลขนาดเล็กในรูปแบบ name–value ใช้เมื่อต้องการเก็บข้อมูลง่ายๆ 
เช่น ชื่อผู้ใช้, สถานะการล็อกอิน, สีพื้นหลังของหน้า เป็นต้น
3. IndexedDB -> ใช้สำหรับเก็บ structured data ปริมาณมากในเบราว์เซอร์ของผู้ใช้ เหมาะสำหรับเว็บแอปที่ต้องการเก็บข้อมูลจำนวนมากอย่างถาวร

/* part 02 Introduction to Cookies */
- HTTP cookies is a small piece of data ที่เซิร์ฟเวอร์ส่งให้กับเว็บเบราว์เซอร์ของผู้ใช้
- เป็นการเชื่อมต่อที่ฝั่งเซิร์ฟเวอร์สามารถใช้เพื่อเก็บและดึงข้อมูลฝั่งผู้ใช้ได้
- เว็บเบราว์เซอร์จะเก็บคุกกี้ไว้ และเมื่อมีการ request ครั้งต่อไปไปยังเซิร์ฟเวอร์เดิม เบราว์เซอร์จะส่งคุกกี้กลับไปด้วยทุกครั้ง (แต่อาจทำให้การทำงานช้าลง)
- เมื่อถูกส่งไป คุกกี้จะเอาไปใช้เพื่อระบุว่า “สอง request มาจากเบราว์เซอร์เดียวกันหรือไม่” เช่น ใช้เพื่อให้ผู้ใช้ยังคงล็อกอินอยู่
- เพิ่มความสามารถในการจำสถานะ ทำให้แอปพลิเคชันเว็บสามารถทำงานได้เหมือนโปรแกรมฝั่ง client/server ที่มีสถานะจริง
- คุกกี้ผูกกับ domain ที่ระบุไว้ตั้งแต่ตอนสร้าง (คุกกี้นั้นจะถูกส่งไปเฉพาะกับ request ที่ส่งไปยังโดเมนนั้นเท่านั้น)

//Syntax of the "set-cookie" HTTP Response Header
Syntax = Set-Cookie: NAME=VALUE; expires=DATE; path=PATH; domain=DOMAIN_NAME; secure; HttpOnly
- Set-Cookie เป็นรูปแบบพื้นฐานในการสร้างคุกกี้ใหม่จากฝั่งเซิร์ฟเวอร์
- ใช้เพื่อส่งคุกกี้จาก เซิร์ฟเวอร์ → เบราว์เซอร์ของผู้ใช้

NAME=VALUE            ชื่อและค่าของคุกกี้ เป็นข้อความที่ห้ามมีอักขระ ; , หรือช่องว่าง
expires=DATE          ระบุวันหมดอายุของคุกกี้ (รูปแบบ Wdy, DD-Mon-YYYY HH:MM:SS GMT) หากไม่ระบุคุกกี้จะหมดอายุเมื่อปิดเบราว์เซอร์
domain=DOMAIN_NAME    ระบุว่า “โดเมนใดบ้างที่สามารถรับคุกกี้นี้ได้” เช่น example.com ถ้าไม่ระบุจะใช้เฉพาะโดเมนปัจจุบัน
path=PATH          	  กำหนดว่า “หน้าหรือไดเรกทอรีใด” ในเว็บไซต์สามารถเข้าถึงคุกกี้นี้ได้ เช่น /, /account เป็นต้น
secure	              คุกกี้จะถูกส่ง เฉพาะเมื่อเป็นการเชื่อมต่อ HTTPS เท่านั้น เพื่อความปลอดภัย
HttpOnly	          ถ้ามี flag นี้ JavaScript จะ ไม่สามารถเข้าถึงคุกกี้ได้ ผ่าน document.cookie (ป้องกัน XSS)

//Syntax of the "Cookie" HTTP Response Header
Syntax = Cookie: xxx:xx; YYY:YY  (แต่ละคุกกี้คั่นด้วย ;)
- เมื่อเบราว์เซอร์ได้รับคุกกี้จากเซิร์ฟเวอร์แล้ว เบราว์เซอร์จะเก็บข้อมูล session เหล่านั้นไว้ 
แล้วส่งกลับไปยังเซิร์ฟเวอร์ทุกครั้งที่ request ภายหลัง ผ่านทางส่วนหัว Cookie


/* part 03 Cookie Types */
1. First-party cookies (คุกกี้ของเจ้าของเว็บไซต์โดยตรง)
- สร้างขึ้นโดยโดเมนเดียวกับที่ผู้ใช้กำลังเข้าชมอยู่ เช่น ผู้ใช้เปิดเว็บ sit.kmutt.ac.th → คุกกี้ที่มาจาก sit.kmutt.ac.th คือ first-party cookie
- ส่วนใหญ่ถือว่าปลอดภัย และเบราว์เซอร์ส่วนใหญ่อนุญาตให้ใช้งานได้ตามปกติ
- ใช้เพื่อปรับแต่งการแสดงผล หรือจดจำสถานะการใช้งานของผู้ใช้

2. Third-party cookies (คุกกี้จากบุคคลที่สาม)
- สร้างโดยโดเมน “อื่น” ที่ไม่ใช่โดเมนที่ผู้ใช้กำลังเข้าเว็บอยู่โดยตรง
- ใช้สำหรับ การติดตามข้ามเว็บไซต์ การโฆษณา และ การเก็บข้อมูลวิเคราะห์
เช่น เว็บที่ฝังโฆษณาจาก ads.com ก็จะได้คุกกี้จาก ads.com ด้วย
- เป็นวิธีที่บริษัทโฆษณาหรือแพลตฟอร์มติดตามผู้ใช้ระหว่างเว็บไซต์ต่าง ๆ ปัจจุบันเบราว์เซอร์หลายตัวเริ่มบล็อกคุกกี้ประเภทนี้โดยอัตโนมัติ เพื่อความเป็นส่วนตัวของผู้ใช้

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

- part 01 ทวน concept ของ Client-Side Storages
- part 02 ทำความเข้าใจ cookies ใหม่จากการเรียนในห้อง
- part 03 Cookie Types 
- part 04 ลองเขียน Cookies in JavaScript ลองกำหนดค่าที่หลากหลาย และดูผลลัพธ์ รวมถึงฝึกการใช้ encode และ decode
- part 05 ทำความเข้าใจ Web Storages แบบ session storage กับ local storage และลองใช้เพื่อเปรียบเทียบความแตกต่าง พร้อมศึกษา method
- practice โจทย์จากในห้อง ซึ่งตอนแรกที่ทำไป ผลลัพธ์มันไม่ได้อัพเดตทันทีหลัง save setting เลยแก้ไข